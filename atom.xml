<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mansany</title>
  <subtitle>我是Mansany，前端小白啊</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-07-26T12:26:24.824Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>王睿佳</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vue.js的学习笔记7--better-scroll滚动插件的引用</title>
    <link href="http://yoursite.com/2017/07/26/vue-js-7/"/>
    <id>http://yoursite.com/2017/07/26/vue-js-7/</id>
    <published>2017-07-26T12:24:08.000Z</published>
    <updated>2017-07-26T12:26:24.824Z</updated>
    
    <content type="html"><![CDATA[<p>关键词：better-scroll滚动插件与vue的结合<br><a id="more"></a></p>
<h3 id="实现原理：父元素固定高度，并设置属性overflow-hidden，使得子元素高度超出容器后能被隐藏。better-scroll作用在父元素上。"><a href="#实现原理：父元素固定高度，并设置属性overflow-hidden，使得子元素高度超出容器后能被隐藏。better-scroll作用在父元素上。" class="headerlink" title="实现原理：父元素固定高度，并设置属性overflow:hidden，使得子元素高度超出容器后能被隐藏。better-scroll作用在父元素上。"></a><strong>实现原理：父元素固定高度，并设置属性overflow:hidden，使得子元素高度超出容器后能被隐藏。better-scroll作用在父元素上。</strong></h3><h2 id="1-安装依赖"><a href="#1-安装依赖" class="headerlink" title="1.安装依赖"></a>1.安装依赖</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install--save better-scroll</div></pre></td></tr></table></figure>
<h2 id="2-引入插件"><a href="#2-引入插件" class="headerlink" title="2.引入插件"></a>2.引入插件</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> BScroll <span class="keyword">from</span> <span class="string">'better-scroll'</span>;</div></pre></td></tr></table></figure>
<h2 id="4-在父元素中定义对象"><a href="#4-在父元素中定义对象" class="headerlink" title="4.在父元素中定义对象"></a>4.在父元素中定义对象</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">v-el:food</div></pre></td></tr></table></figure>
<h2 id="5-使用"><a href="#5-使用" class="headerlink" title="5.使用"></a>5.使用</h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">  &lt;div class="food" v-show="showFlag" transition="move" v-el:food&gt;//v-el:food定义对象</div><div class="line">    &lt;div class="food-content"&gt;//内容层自动撑开</div><div class="line">         ...</div><div class="line">    &lt;/div&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/template&gt;</div><div class="line"></div><div class="line">&lt;script type="text/ecmascript-6"&gt;</div><div class="line">import BScroll from 'better-scroll';</div><div class="line">export default&#123;</div><div class="line">    methods:&#123;</div><div class="line">        show()&#123;</div><div class="line">            this.showFlag = true;</div><div class="line">            this.$nextTick(() =&gt; &#123;</div><div class="line">                if(!this.scroll)&#123;</div><div class="line">                    this.scroll = new BScroll(this.$els.food,&#123;</div><div class="line">                        click:true//this.$els.food获取对象的接口</div><div class="line">                  &#125;);</div><div class="line">                &#125;</div><div class="line">                else&#123;</div><div class="line">                    this.scroll.refresh();</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">  &#125;;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<p><strong>Vue 更新数据时是异步的,所以在数据未加载完全之前,Bscroll无法获取目标内容的高度,所以会导致无法滚动的现象。为了解决上面的问题,运用Vue的nextTick();</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关键词：better-scroll滚动插件与vue的结合&lt;br&gt;
    
    </summary>
    
      <category term="vue.js学习笔记" scheme="http://yoursite.com/categories/vue-js%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="vue.js" scheme="http://yoursite.com/tags/vue-js/"/>
    
      <category term="插件" scheme="http://yoursite.com/tags/%E6%8F%92%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>vue.js学习笔记6--页面过渡与动画效果</title>
    <link href="http://yoursite.com/2017/07/26/vue-js-6/"/>
    <id>http://yoursite.com/2017/07/26/vue-js-6/</id>
    <published>2017-07-26T12:22:53.000Z</published>
    <updated>2017-07-26T12:22:59.573Z</updated>
    
    <content type="html"><![CDATA[<p>关键词：transition页面过渡与动画<br><a id="more"></a></p>
<h3 id="示例1：页面从右翻到左"><a href="#示例1：页面从右翻到左" class="headerlink" title="示例1：页面从右翻到左"></a>示例1：页面从右翻到左</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//html模块</span></div><div class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"food"</span> v-show=<span class="string">"showFlag"</span> transition=<span class="string">"move"</span>&gt;</div><div class="line">    ...</div><div class="line">&lt;<span class="regexp">/div&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">css模块</div><div class="line">.food</div><div class="line"> &amp;.move-transition <span class="comment">//准备执行动画效果</span></div><div class="line">   transition all <span class="number">0.4</span> linear</div><div class="line">   transform translate3d(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</div><div class="line"> &amp;.move-enter, &amp;.move-leave <span class="comment">//进入动画效果，离开动画效果</span></div><div class="line">   transform translate3d(<span class="number">100</span>%, <span class="number">0</span>, <span class="number">0</span>)<span class="comment">//从右到左，平移了相对宽度100%</span></div></pre></td></tr></table></figure>
<h3 id="示例2：页面显现隐藏"><a href="#示例2：页面显现隐藏" class="headerlink" title="示例2：页面显现隐藏"></a>示例2：页面显现隐藏</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//html模块</span></div><div class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"detail"</span> v-show=<span class="string">"detailShow"</span> transition=<span class="string">"fade"</span>&gt;</div><div class="line">    ...</div><div class="line">&lt;<span class="regexp">/div&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">css模块</div><div class="line">.detail</div><div class="line">  &amp;.fade-transition<span class="comment">//准备执行动画效果</span></div><div class="line">    opacity <span class="number">1</span></div><div class="line">    background rgba(<span class="number">7</span>,<span class="number">17</span>,<span class="number">27</span>,<span class="number">0.8</span>)</div><div class="line">  &amp;.fade-enter,&amp;.fade-leave <span class="comment">//进入动画效果，离开动画效果</span></div><div class="line">    opacity <span class="number">0</span></div><div class="line">    background rgba(<span class="number">7</span>,<span class="number">17</span>,<span class="number">27</span>,<span class="number">0</span>)</div></pre></td></tr></table></figure>
<h3 id="示例3：页面显现折叠"><a href="#示例3：页面显现折叠" class="headerlink" title="示例3：页面显现折叠"></a>示例3：页面显现折叠</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//html模块</span></div><div class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"shopcart-list"</span> v-show=<span class="string">"listShow"</span> transition=<span class="string">"fold"</span>&gt;</div><div class="line">    ...</div><div class="line">&lt;<span class="regexp">/div&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">css模块</div><div class="line">.shopcart-list</div><div class="line">  &amp;.fold-transition<span class="comment">//准备执行动画效果</span></div><div class="line">    transition all <span class="number">0.5</span>s</div><div class="line">    transform translate3d(<span class="number">0</span>,<span class="number">-100</span>%,<span class="number">0</span>)</div><div class="line">  &amp;.fold-enter,&amp;.fold-leave <span class="comment">//进入动画效果，离开动画效果</span></div><div class="line">    transform translate3d(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>)</div></pre></td></tr></table></figure>
<h3 id="示例4：2个动画效果，平移和滚动同步"><a href="#示例4：2个动画效果，平移和滚动同步" class="headerlink" title="示例4：2个动画效果，平移和滚动同步"></a>示例4：2个动画效果，平移和滚动同步</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//html模块</span></div><div class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"cart-decrease"</span> v-show=<span class="string">"food.count&gt;0"</span> @click=<span class="string">"decreaseCart"</span> transition=<span class="string">"move"</span>&gt;</div><div class="line">  &lt;span class="inner icon-remove_circle_outline"&gt;&lt;/span&gt;</div><div class="line">&lt;<span class="regexp">/div&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">css模块</div><div class="line">.cart-decrease</div><div class="line">    transition all <span class="number">0.4</span>s linear<span class="comment">// CSS 属性的名称、过渡效果需要多少时间、速度效果的速度曲线</span></div><div class="line">    &amp;.move-transition</div><div class="line">      opacity <span class="number">1</span></div><div class="line">      transifrom translate3d(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>)<span class="comment">//外层平移从0到24px</span></div><div class="line">      .inner<span class="comment">//内层滚动从0到180度</span></div><div class="line">        transition all <span class="number">0.4</span>s linear</div><div class="line">        transform rouate(<span class="number">0</span>)</div><div class="line">    &amp;.move-enter,&amp;.move-leave</div><div class="line">      opacity <span class="number">0</span></div><div class="line">      transifrom translate3d(<span class="number">24</span>px,<span class="number">0</span>,<span class="number">0</span>)<span class="comment">//3D旋转，X轴位移24px</span></div><div class="line">      .inner</div><div class="line">        transform rouate(<span class="number">180</span>deg)<span class="comment">//内层滚动从0到180度</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关键词：transition页面过渡与动画&lt;br&gt;
    
    </summary>
    
      <category term="vue.js学习笔记" scheme="http://yoursite.com/categories/vue-js%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="vue.js" scheme="http://yoursite.com/tags/vue-js/"/>
    
      <category term="页面动画效果" scheme="http://yoursite.com/tags/%E9%A1%B5%E9%9D%A2%E5%8A%A8%E7%94%BB%E6%95%88%E6%9E%9C/"/>
    
  </entry>
  
  <entry>
    <title>vue.js学习笔记5--页面布局</title>
    <link href="http://yoursite.com/2017/07/25/vue-js-5/"/>
    <id>http://yoursite.com/2017/07/25/vue-js-5/</id>
    <published>2017-07-25T13:50:53.000Z</published>
    <updated>2017-07-26T12:26:46.804Z</updated>
    
    <content type="html"><![CDATA[<p>关键词：css的页面布局<br><a id="more"></a></p>
<h2 id="1-Flex布局的简介"><a href="#1-Flex布局的简介" class="headerlink" title="1.Flex布局的简介"></a><strong>1.Flex布局的简介</strong></h2><p>Flex 是 Flexible Box 的缩写，意为”弹性布局”，flex布局可以简便、完整、响应式地实现各种页面布局。</p>
<h2 id="2-Flex布局的实例"><a href="#2-Flex布局的实例" class="headerlink" title="2.Flex布局的实例"></a><strong>2.Flex布局的实例</strong></h2><p>父容器都用<strong>display:flex;</strong><br>子容器根据页面具体情况而定。</p>
<h3 id="非等分布局"><a href="#非等分布局" class="headerlink" title="非等分布局"></a>非等分布局</h3><p>父容器都用 <strong>display:flex;</strong><br>子容器用  <strong>flex:x x x;</strong><br>第一个属性：等分<br>第二个属性：内容缩放情况<br>第三个属性：占位空间<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">.food-item</div><div class="line">        display flex<span class="comment">//父元素</span></div><div class="line">        margin <span class="number">18</span>px</div><div class="line">        padding-bottom <span class="number">18</span>px</div><div class="line">        border<span class="number">-1</span>px(rgba(<span class="number">7</span>,<span class="number">17</span>,<span class="number">27</span>,<span class="number">0.1</span>))</div><div class="line">        &amp;:last-child</div><div class="line">          border-bottom <span class="number">0</span>px</div><div class="line">          border-none()</div><div class="line">        .icon</div><div class="line">          flex <span class="number">0</span> <span class="number">0</span> <span class="number">57</span>px<span class="comment">//子元素</span></div><div class="line">          margin-right <span class="number">10</span>px</div></pre></td></tr></table></figure></p>
<h3 id="等分布局"><a href="#等分布局" class="headerlink" title="等分布局"></a>等分布局</h3><p>父容器都用 <strong>display:flex;</strong><br>子容器用 <strong>flex:1;</strong>。<br>```js<br>.food-item<br>        display flex//父元素<br>        margin 18px<br>        padding-bottom 18px<br>        border-1px(rgba(7,17,27,0.1))<br>        &amp;:last-child<br>          border-bottom 0px<br>          border-none()<br>        .content<br>          flex 1//子元素<br>          margin-top 2px<br>          position relative</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关键词：css的页面布局&lt;br&gt;
    
    </summary>
    
      <category term="vue.js学习笔记" scheme="http://yoursite.com/categories/vue-js%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="vue.js" scheme="http://yoursite.com/tags/vue-js/"/>
    
      <category term="CSS页面布局" scheme="http://yoursite.com/tags/CSS%E9%A1%B5%E9%9D%A2%E5%B8%83%E5%B1%80/"/>
    
  </entry>
  
  <entry>
    <title>vue.js学习笔记4--vue.set()方法</title>
    <link href="http://yoursite.com/2017/07/25/vue-js-4/"/>
    <id>http://yoursite.com/2017/07/25/vue-js-4/</id>
    <published>2017-07-25T12:59:53.000Z</published>
    <updated>2017-07-25T13:19:13.909Z</updated>
    
    <content type="html"><![CDATA[<p>关键词：vue.set()方法触发视图更新。<br><a id="more"></a><br>当我们给vue页面添加一个实例是，再次给数据赋值，有时候不会自动更新到视图上。<br>这时，我们要用到vue.set()方法触发视图更新。</p>
<h3 id="修改前："><a href="#修改前：" class="headerlink" title="修改前："></a>修改前：</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">    methods:&#123;</div><div class="line">        addCarts(event)&#123;</div><div class="line">            <span class="keyword">if</span>(!event._constructed)&#123;</div><div class="line">                 <span class="keyword">return</span>;</div><div class="line">                &#125;</div><div class="line">            <span class="keyword">if</span>(!<span class="keyword">this</span>.food.count)<span class="comment">//当food.count不存在时&#123;</span></div><div class="line">                <span class="keyword">this</span>.food.count=<span class="number">1</span>;<span class="comment">//点击时，food.count输入1，但是视图上不会展现</span></div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">               <span class="keyword">this</span>.food.count++;</div><div class="line">            &#125; </div><div class="line">      &#125;</div><div class="line">            &#125;</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<h3 id="修改后"><a href="#修改后" class="headerlink" title="修改后"></a>修改后</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">    <span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;<span class="comment">//传入vue的接口</span></div><div class="line">    </div><div class="line">    methods:&#123;</div><div class="line">         addCarts(event)&#123;</div><div class="line">                    <span class="keyword">if</span>(!event._constructed)&#123;</div><div class="line">                      <span class="keyword">return</span>;</div><div class="line">                  &#125;</div><div class="line">                      <span class="keyword">if</span>(!<span class="keyword">this</span>.food.count)&#123;</div><div class="line">                       Vue.set(<span class="keyword">this</span>.food,<span class="string">'count'</span>,<span class="number">1</span>);<span class="comment">//当点击时，视图会及时更新1</span></div><div class="line">                      &#125;<span class="keyword">else</span>&#123;</div><div class="line">                        <span class="keyword">this</span>.food.count++;</div><div class="line">                      &#125;</div><div class="line">                  &#125;,</div><div class="line">             &#125;</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关键词：vue.set()方法触发视图更新。&lt;br&gt;
    
    </summary>
    
      <category term="vue.js学习笔记" scheme="http://yoursite.com/categories/vue-js%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="vue.js" scheme="http://yoursite.com/tags/vue-js/"/>
    
      <category term="vue的方法" scheme="http://yoursite.com/tags/vue%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>vue.js学习笔记3--push（）方法</title>
    <link href="http://yoursite.com/2017/07/24/vue-js%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B03-push%EF%BC%88%EF%BC%89%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2017/07/24/vue-js学习笔记3-push（）方法/</id>
    <published>2017-07-24T12:45:26.000Z</published>
    <updated>2017-07-25T13:20:57.077Z</updated>
    
    <content type="html"><![CDATA[<p>关键词：push（）方法<br><a id="more"></a><br><strong>push()方法可以接收任意数量的参数，把它们逐个添加到数组的末尾，并返回修改后数组的长度。</strong></p>
<h3 id="eg1"><a href="#eg1" class="headerlink" title="eg1:"></a>eg1:</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = []; <span class="comment">//创建一个空数组</span></div><div class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// []</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">"入栈"</span>); <span class="comment">// 入栈</span></div><div class="line">arr.push(<span class="number">1</span>); </div><div class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [1]</span></div><div class="line">arr.push(<span class="number">2</span>); </div><div class="line"><span class="built_in">console</span>.log(arr); <span class="comment">//[1,2]</span></div><div class="line">arr.push([<span class="number">3</span>,<span class="number">4</span>]); </div><div class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [1,2,[3,4]]</span></div><div class="line"><span class="built_in">console</span>.log(arr.length); <span class="comment">// 3</span></div></pre></td></tr></table></figure>
<h3 id="eg2"><a href="#eg2" class="headerlink" title="eg2:"></a>eg2:</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">_calculateHeight()&#123;</div><div class="line">        <span class="keyword">let</span> foodList = <span class="keyword">this</span>.$els.foodsWrapper.getElementsByClassName(<span class="string">'food-list-hook'</span>);<span class="comment">//定义每个区间的高度</span></div><div class="line">        <span class="keyword">let</span> height = <span class="number">0</span>;</div><div class="line">        <span class="keyword">this</span>.listHeight.push(height);<span class="comment">//push（）方法，在数组中添加一个height，返回并修改后的数组长度</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;foodList.length;i++) &#123;</div><div class="line">            <span class="keyword">let</span> item = foodList[i];</div><div class="line">            height += item.clientHeight;<span class="comment">//对每个区间的高度进行连接起来</span></div><div class="line">            <span class="keyword">this</span>.listHeight.push(height);</div><div class="line">        &#125;<span class="comment">//递增的，对应的是每个区间的高度是多少</span></div><div class="line">      &#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关键词：push（）方法&lt;br&gt;
    
    </summary>
    
      <category term="vue.js学习笔记" scheme="http://yoursite.com/categories/vue-js%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="vue.js" scheme="http://yoursite.com/tags/vue-js/"/>
    
      <category term="vue的方法" scheme="http://yoursite.com/tags/vue%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>vue.js学习笔记2--v-if，v-for，v-show</title>
    <link href="http://yoursite.com/2017/07/24/vue-js%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02-v-if%EF%BC%8Cv-for%EF%BC%8Cv-show/"/>
    <id>http://yoursite.com/2017/07/24/vue-js学习笔记2-v-if，v-for，v-show/</id>
    <published>2017-07-24T08:06:24.000Z</published>
    <updated>2017-07-25T13:21:14.951Z</updated>
    
    <content type="html"><![CDATA[<p>关键词：v-if，v-for，v-show<br><a id="more"></a></p>
<h2 id="1-v-if，v-for，v-show三大指令都用于-lt-template-gt-lt-template-gt-中"><a href="#1-v-if，v-for，v-show三大指令都用于-lt-template-gt-lt-template-gt-中" class="headerlink" title="1.v-if，v-for，v-show三大指令都用于&lt;template&gt;&lt;/template&gt;中"></a><strong>1.v-if，v-for，v-show三大指令都用于<code>&lt;template&gt;&lt;/template&gt;</code>中</strong></h2><h2 id="2-v-if"><a href="#2-v-if" class="headerlink" title="2.v-if "></a><strong>2.v-if </strong></h2><p> v-if，如果为false，则什么也不编译，不渲染。 当第一次条件为真时，才开始编译。<strong>简单来说，该值为true则显示该标签，为false则不显示；</strong><br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"> &lt;div id="app"&gt;  </div><div class="line">     &lt;div v-if="abc"&gt;&#123;&#123;abc.a&#125;&#125;&lt;/div&gt;  </div><div class="line"> &lt;/div&gt;  </div><div class="line"> &lt;script&gt;  </div><div class="line">     var vm = new Vue(&#123;  </div><div class="line">         el: '#app',  </div><div class="line">         data: &#123;  </div><div class="line">             abc: &#123;  </div><div class="line">                 a: "1"  </div><div class="line">             &#125;  </div><div class="line">         &#125;  </div><div class="line">     &#125;)</div><div class="line">     &lt;pre name="code" class="javascript"&gt;  </div><div class="line"> &lt;/script&gt; </div><div class="line"> // 当abc这个对象存在时，显示这一行数据，其内容为abc.a的值；</div><div class="line">//假如abc这个对象不存在，那么则不显示；</div></pre></td></tr></table></figure></p>
<h2 id="3-v-show-用于控制该标签的display样式"><a href="#3-v-show-用于控制该标签的display样式" class="headerlink" title="3.v-show: 用于控制该标签的display样式"></a><strong>3.v-show: 用于控制该标签的display样式</strong></h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;div class="cart-count" v-show="food.count&gt;0"&gt;&#123;&#123;food.count&#125;&#125;&lt;/div&gt;</div><div class="line">//cart-count的值food.count&gt;0时，则正常显示；</div><div class="line">//cart-count的值food.count&lt;=0时，则自动添加display:none；</div></pre></td></tr></table></figure>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;div class="num" v-show="totalCount&gt;0"&gt;&#123;&#123;totalCount&#125;&#125;&lt;/div&gt;</div><div class="line">//num的值totalCount&gt;0时，则正常显示；</div><div class="line">//num的值totalCount&lt;=0时，则自动添加display:none；</div></pre></td></tr></table></figure>
<h2 id="4-v-for-用于列表渲染"><a href="#4-v-for-用于列表渲染" class="headerlink" title="4.v-for: 用于列表渲染"></a><strong>4.v-for: 用于列表渲染</strong></h2><p>【1】items是一个对象或者数组；<br>【2】该格式相当于for(var i in items)<br>【3】插值的i相当于items[i]<br>【4】该li会被复制多个，然后依次被items[i]渲染，直到渲染完毕；<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&lt;div id="app"&gt;  </div><div class="line">    &lt;ul&gt;  </div><div class="line">        &lt;li v-for="i in items"&gt;&#123;&#123;i&#125;&#125;&lt;/li&gt;  </div><div class="line">    &lt;/ul&gt;  </div><div class="line">&lt;/div&gt;  </div><div class="line">&lt;script&gt;  </div><div class="line">    var vm = new Vue(&#123;  </div><div class="line">        el: '#app',  </div><div class="line">        data: &#123;  </div><div class="line">            items: &#123;  </div><div class="line">                a: "1",  </div><div class="line">                b: "2",  </div><div class="line">                c: "3"  </div><div class="line">            &#125;  </div><div class="line">        &#125;  </div><div class="line">    &#125;)  </div><div class="line"> &lt;/script&gt; </div><div class="line">//输出结果 </div><div class="line">&lt;div id="app"&gt;</div><div class="line">    &lt;ul&gt;</div><div class="line">        &lt;li&gt;1&lt;/li&gt;</div><div class="line">        &lt;li&gt;2&lt;/li&gt;</div><div class="line">        &lt;li&gt;3&lt;/li&gt;</div><div class="line">    &lt;/ul&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure></p>
<h2 id="5-v-if和v-show的比较"><a href="#5-v-if和v-show的比较" class="headerlink" title="5.v-if和v-show的比较"></a><strong>5.v-if和v-show的比较</strong></h2><p>v-if</p>
<ul>
<li>渲染时间：第一次为真时</li>
<li>切换形式：动态生成，局部编译/卸载</li>
<li>生成消耗：较小（只生成为真的部分）</li>
<li>切换消耗：较大（切换时需要局部编译）</li>
</ul>
<p>v-show</p>
<ul>
<li>渲染时间：刚开始就渲染</li>
<li>切换形式：较大（生成全部）</li>
<li>生成消耗：较大（生成全部）</li>
<li>切换消耗：较小（因为生成时已经渲染完成）</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关键词：v-if，v-for，v-show&lt;br&gt;
    
    </summary>
    
      <category term="vue.js学习笔记" scheme="http://yoursite.com/categories/vue-js%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="vue.js" scheme="http://yoursite.com/tags/vue-js/"/>
    
      <category term="vue的指令" scheme="http://yoursite.com/tags/vue%E7%9A%84%E6%8C%87%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>vue.js学习笔记1--主组件和子组件的衔接</title>
    <link href="http://yoursite.com/2017/07/24/vue-js%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01-%E4%B8%BB%E7%BB%84%E4%BB%B6%E5%92%8C%E5%AD%90%E7%BB%84%E4%BB%B6%E7%9A%84%E8%A1%94%E6%8E%A5/"/>
    <id>http://yoursite.com/2017/07/24/vue-js学习笔记1-主组件和子组件的衔接/</id>
    <published>2017-07-24T06:18:10.000Z</published>
    <updated>2017-07-25T13:21:49.517Z</updated>
    
    <content type="html"><![CDATA[<p>关键词：<br>组件的定义、组件之间的衔接<br><a id="more"></a></p>
<h2 id="1-组件的定义"><a href="#1-组件的定义" class="headerlink" title="1.组件的定义"></a><strong>1.组件的定义</strong></h2><p>组件（Component）是 Vue.js 最强大的功能之一。组件可以扩展 HTML 元素，封装可重用的代码。在较高层面上，组件是自定义元素，Vue.js 的编译器为它添加特殊功能。在有些情况下，组件也可以是原生 HTML 元素的形式，以 is 特性扩展。</p>
<h2 id="2-组件之间的衔接"><a href="#2-组件之间的衔接" class="headerlink" title="2.组件之间的衔接"></a><strong>2.组件之间的衔接</strong></h2><h3 id="step1：在新建的子组件根目录下新建一个-vue文件"><a href="#step1：在新建的子组件根目录下新建一个-vue文件" class="headerlink" title="step1：在新建的子组件根目录下新建一个.vue文件"></a>step1：在新建的子组件根目录下新建一个.vue文件</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">      &lt;div class="shopcart"&gt;&lt;/div&gt;</div><div class="line">&lt;/template&gt;</div><div class="line"></div><div class="line">&lt;script type="text/ecmascript-6"&gt;</div><div class="line">    export default&#123;&#125;;</div><div class="line">&lt;/script&gt;</div><div class="line"></div><div class="line">&lt;style lang="stylus" rel="stylesheet/stylus"&gt;</div><div class="line"></div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure>
<h3 id="step2：在主组件下引入该子组件"><a href="#step2：在主组件下引入该子组件" class="headerlink" title="step2：在主组件下引入该子组件"></a>step2：在主组件下引入该子组件</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">    &lt;div class="goods"&gt;&lt;/div&gt;</div><div class="line">&lt;/template&gt;</div><div class="line"></div><div class="line">&lt;script type="text/ecmascript-6"&gt;</div><div class="line">    import cartconcontrol from 'components/shopcart/shopcart.vue';</div><div class="line">&lt;/script&gt;</div><div class="line"></div><div class="line">&lt;style lang="stylus" rel="stylesheet/stylus"&gt;</div><div class="line"></div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure>
<h3 id="step3：在主组件下注册子组件"><a href="#step3：在主组件下注册子组件" class="headerlink" title="step3：在主组件下注册子组件"></a>step3：在主组件下注册子组件</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">    &lt;div class="goods"&gt;&lt;/div&gt;</div><div class="line">&lt;/template&gt;</div><div class="line"></div><div class="line">&lt;script type="text/ecmascript-6"&gt;</div><div class="line">    import cartconcontrol from 'components/shopcart/shopcart.vue';</div><div class="line">	</div><div class="line">	components:&#123;</div><div class="line">        shopcart</div><div class="line">    &#125;</div><div class="line">&lt;/script&gt;</div><div class="line"></div><div class="line">&lt;style lang="stylus" rel="stylesheet/stylus"&gt;</div><div class="line"></div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure>
<h3 id="step4：在主组件的模块中以自定义元素-的形式使用"><a href="#step4：在主组件的模块中以自定义元素-的形式使用" class="headerlink" title="step4：在主组件的模块中以自定义元素  的形式使用"></a>step4：在主组件的模块中以自定义元素 <shopcart> 的形式使用</shopcart></h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">    &lt;div class="goods"&gt;&lt;/div&gt;</div><div class="line">    &lt;shopcart&gt;&lt;/shopcart&gt;</div><div class="line">&lt;/template&gt;</div><div class="line"></div><div class="line">&lt;script type="text/ecmascript-6"&gt;</div><div class="line">    import cartconcontrol from 'components/shopcart/shopcart.vue';</div><div class="line">    </div><div class="line">    components:&#123;</div><div class="line">        shopcart</div><div class="line">    &#125;</div><div class="line">&lt;/script&gt;</div><div class="line"></div><div class="line">&lt;style lang="stylus" rel="stylesheet/stylus"&gt;</div><div class="line"></div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关键词：&lt;br&gt;组件的定义、组件之间的衔接&lt;br&gt;
    
    </summary>
    
      <category term="vue.js学习笔记" scheme="http://yoursite.com/categories/vue-js%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="vue.js" scheme="http://yoursite.com/tags/vue-js/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2017/07/04/hello-world/"/>
    <id>http://yoursite.com/2017/07/04/hello-world/</id>
    <published>2017-07-04T02:33:58.958Z</published>
    <updated>2017-07-04T02:33:58.959Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
