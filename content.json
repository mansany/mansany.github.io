[{"title":"vue.js学习笔记4--vue.set()方法","date":"2017-07-25T12:59:53.000Z","path":"2017/07/25/vue-js-4/","text":"关键词：vue.set()方法触发视图更新。当我们给vue页面添加一个实例是，再次给数据赋值，有时候不会自动更新到视图上。这时，我们要用到vue.set()方法触发视图更新。 修改前：1234567891011121314&lt;script&gt; methods:&#123; addCarts(event)&#123; if(!event._constructed)&#123; return; &#125; if(!this.food.count)//当food.count不存在时&#123; this.food.count=1;//点击时，food.count输入1，但是视图上不会展现 &#125;else&#123; this.food.count++; &#125; &#125; &#125;&lt;/script&gt; 修改后12345678910111213141516&lt;script&gt; import Vue from 'vue';//传入vue的接口 methods:&#123; addCarts(event)&#123; if(!event._constructed)&#123; return; &#125; if(!this.food.count)&#123; Vue.set(this.food,'count',1);//当点击时，视图会及时更新1 &#125;else&#123; this.food.count++; &#125; &#125;, &#125;&lt;/script&gt;","tags":[{"name":"vue.js","slug":"vue-js","permalink":"http://yoursite.com/tags/vue-js/"},{"name":"vue的方法","slug":"vue的方法","permalink":"http://yoursite.com/tags/vue的方法/"}]},{"title":"vue.js学习笔记3--push（）方法","date":"2017-07-24T12:45:26.000Z","path":"2017/07/24/vue-js学习笔记3-push（）方法/","text":"关键词：push（）方法push()方法可以接收任意数量的参数，把它们逐个添加到数组的末尾，并返回修改后数组的长度。 eg1:12345678910var arr = []; //创建一个空数组console.log(arr); // []console.log(\"入栈\"); // 入栈arr.push(1); console.log(arr); // [1]arr.push(2); console.log(arr); //[1,2]arr.push([3,4]); console.log(arr); // [1,2,[3,4]]console.log(arr.length); // 3 eg2:12345678910_calculateHeight()&#123; let foodList = this.$els.foodsWrapper.getElementsByClassName('food-list-hook');//定义每个区间的高度 let height = 0; this.listHeight.push(height);//push（）方法，在数组中添加一个height，返回并修改后的数组长度 for(let i=0;i&lt;foodList.length;i++) &#123; let item = foodList[i]; height += item.clientHeight;//对每个区间的高度进行连接起来 this.listHeight.push(height); &#125;//递增的，对应的是每个区间的高度是多少 &#125;","tags":[{"name":"vue.js","slug":"vue-js","permalink":"http://yoursite.com/tags/vue-js/"},{"name":"vue的方法","slug":"vue的方法","permalink":"http://yoursite.com/tags/vue的方法/"}]},{"title":"vue.js学习笔记2--v-if，v-for，v-show","date":"2017-07-24T08:06:24.000Z","path":"2017/07/24/vue-js学习笔记2-v-if，v-for，v-show/","text":"关键词：v-if，v-for，v-show 1.v-if，v-for，v-show三大指令都用于&lt;template&gt;&lt;/template&gt;中2.v-if v-if，如果为false，则什么也不编译，不渲染。 当第一次条件为真时，才开始编译。简单来说，该值为true则显示该标签，为false则不显示；12345678910111213141516 &lt;div id=\"app\"&gt; &lt;div v-if=\"abc\"&gt;&#123;&#123;abc.a&#125;&#125;&lt;/div&gt; &lt;/div&gt; &lt;script&gt; var vm = new Vue(&#123; el: '#app', data: &#123; abc: &#123; a: \"1\" &#125; &#125; &#125;) &lt;pre name=\"code\" class=\"javascript\"&gt; &lt;/script&gt; // 当abc这个对象存在时，显示这一行数据，其内容为abc.a的值；//假如abc这个对象不存在，那么则不显示； 3.v-show: 用于控制该标签的display样式123&lt;div class=\"cart-count\" v-show=\"food.count&gt;0\"&gt;&#123;&#123;food.count&#125;&#125;&lt;/div&gt;//cart-count的值food.count&gt;0时，则正常显示；//cart-count的值food.count&lt;=0时，则自动添加display:none； 123&lt;div class=\"num\" v-show=\"totalCount&gt;0\"&gt;&#123;&#123;totalCount&#125;&#125;&lt;/div&gt;//num的值totalCount&gt;0时，则正常显示；//num的值totalCount&lt;=0时，则自动添加display:none； 4.v-for: 用于列表渲染【1】items是一个对象或者数组；【2】该格式相当于for(var i in items)【3】插值的i相当于items[i]【4】该li会被复制多个，然后依次被items[i]渲染，直到渲染完毕；12345678910111213141516171819202122232425&lt;div id=\"app\"&gt; &lt;ul&gt; &lt;li v-for=\"i in items\"&gt;&#123;&#123;i&#125;&#125;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;script&gt; var vm = new Vue(&#123; el: '#app', data: &#123; items: &#123; a: \"1\", b: \"2\", c: \"3\" &#125; &#125; &#125;) &lt;/script&gt; //输出结果 &lt;div id=\"app\"&gt; &lt;ul&gt; &lt;li&gt;1&lt;/li&gt; &lt;li&gt;2&lt;/li&gt; &lt;li&gt;3&lt;/li&gt; &lt;/ul&gt;&lt;/div&gt; 5.v-if和v-show的比较v-if 渲染时间：第一次为真时 切换形式：动态生成，局部编译/卸载 生成消耗：较小（只生成为真的部分） 切换消耗：较大（切换时需要局部编译） v-show 渲染时间：刚开始就渲染 切换形式：较大（生成全部） 生成消耗：较大（生成全部） 切换消耗：较小（因为生成时已经渲染完成）","tags":[{"name":"vue.js","slug":"vue-js","permalink":"http://yoursite.com/tags/vue-js/"},{"name":"vue的指令","slug":"vue的指令","permalink":"http://yoursite.com/tags/vue的指令/"}]},{"title":"vue.js学习笔记1--主组件和子组件的衔接","date":"2017-07-24T06:18:10.000Z","path":"2017/07/24/vue-js学习笔记1-主组件和子组件的衔接/","text":"关键词：组件的定义、组件之间的衔接 1.组件的定义组件（Component）是 Vue.js 最强大的功能之一。组件可以扩展 HTML 元素，封装可重用的代码。在较高层面上，组件是自定义元素，Vue.js 的编译器为它添加特殊功能。在有些情况下，组件也可以是原生 HTML 元素的形式，以 is 特性扩展。 2.组件之间的衔接step1：在新建的子组件根目录下新建一个.vue文件1234567891011&lt;template&gt; &lt;div class=\"shopcart\"&gt;&lt;/div&gt;&lt;/template&gt;&lt;script type=\"text/ecmascript-6\"&gt; export default&#123;&#125;;&lt;/script&gt;&lt;style lang=\"stylus\" rel=\"stylesheet/stylus\"&gt;&lt;/style&gt; step2：在主组件下引入该子组件1234567891011&lt;template&gt; &lt;div class=\"goods\"&gt;&lt;/div&gt;&lt;/template&gt;&lt;script type=\"text/ecmascript-6\"&gt; import cartconcontrol from 'components/shopcart/shopcart.vue';&lt;/script&gt;&lt;style lang=\"stylus\" rel=\"stylesheet/stylus\"&gt;&lt;/style&gt; step3：在主组件下注册子组件123456789101112131415&lt;template&gt; &lt;div class=\"goods\"&gt;&lt;/div&gt;&lt;/template&gt;&lt;script type=\"text/ecmascript-6\"&gt; import cartconcontrol from 'components/shopcart/shopcart.vue'; components:&#123; shopcart &#125;&lt;/script&gt;&lt;style lang=\"stylus\" rel=\"stylesheet/stylus\"&gt;&lt;/style&gt; step4：在主组件的模块中以自定义元素 的形式使用12345678910111213141516&lt;template&gt; &lt;div class=\"goods\"&gt;&lt;/div&gt; &lt;shopcart&gt;&lt;/shopcart&gt;&lt;/template&gt;&lt;script type=\"text/ecmascript-6\"&gt; import cartconcontrol from 'components/shopcart/shopcart.vue'; components:&#123; shopcart &#125;&lt;/script&gt;&lt;style lang=\"stylus\" rel=\"stylesheet/stylus\"&gt;&lt;/style&gt;","tags":[{"name":"vue.js","slug":"vue-js","permalink":"http://yoursite.com/tags/vue-js/"}]},{"title":"Hello World","date":"2017-07-04T02:33:58.958Z","path":"2017/07/04/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]}]